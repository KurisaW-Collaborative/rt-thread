name: AutoTestCI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  # Runs at 16:00 UTC (BeiJing 00:00) on the 1st of every month
  schedule:
    - cron:  '0 16 1 * *'
  push:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  test:
    runs-on: ubuntu-22.04
    name: ${{ matrix.legs.UTEST }}
    if: github.repository_owner == 'KurisaW-Collaborative'
    strategy:
      fail-fast: false
      matrix:
       legs:
         # - {UTEST: "kernel/mem",       RTT_BSP: "bsp/qemu-vexpress-a9",    QEMU_ARCH: "arm",      QEMU_MACHINE: "vexpress-a9", CONFIG_FILE: "kernel/mem.conf",     SD_FILE: "sd.bin", RUN: "yes"}
         - {UTEST: "components/utest", RTT_BSP: "bsp/qemu-vexpress-a9",    QEMU_ARCH: "arm",      QEMU_MACHINE: "vexpress-a9", CONFIG_FILE: "utest_self/self.conf", SD_FILE: "sd.bin", RUN: "yes"}
    env:
      TEST_QEMU_ARCH: ${{ matrix.legs.QEMU_ARCH }}
      TEST_QEMU_MACHINE: ${{ matrix.legs.QEMU_MACHINE }}
      TEST_BSP_ROOT: ${{ matrix.legs.RTT_BSP }}
      TEST_CONFIG_FILE: ${{ matrix.legs.CONFIG_FILE }}
      TEST_SD_FILE: ${{ matrix.legs.SD_FILE }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -yqq install scons qemu-system git
        pip3 install kconfiglib
        sudo apt-get install -y inotify-tools

    - name: Install Arm ToolChains
      if: ${{ matrix.legs.QEMU_ARCH == 'arm' && matrix.legs.UTEST != 'rtsmart/arm' && success() }}
      shell: bash
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
        /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
        echo "RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin" >> $GITHUB_ENV

    - name: Install Arm Musl ToolChains
      if: ${{ matrix.legs.QEMU_ARCH == 'arm' && matrix.legs.UTEST == 'rtsmart/arm' && success() }}
      shell: bash
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.7/arm-linux-musleabi_for_x86_64-pc-linux-gnu_stable.tar.bz2
        sudo tar xjf arm-linux-musleabi_for_x86_64-pc-linux-gnu_stable.tar.bz2 -C /opt
        /opt/arm-linux-musleabi_for_x86_64-pc-linux-gnu/bin/arm-linux-musleabi-gcc --version
        echo "RTT_EXEC_PATH=/opt/arm-linux-musleabi_for_x86_64-pc-linux-gnu/bin" >> $GITHUB_ENV
        echo "RTT_CC_PREFIX=arm-linux-musleabi-" >> $GITHUB_ENV

    - name: Install RISC-V ToolChains
      if: ${{ matrix.legs.QEMU_ARCH == 'riscv64' && matrix.legs.UTEST != 'rtsmart/riscv64' && success() }}
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.4/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
        sudo tar zxvf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz -C /opt
        /opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin/riscv64-unknown-elf-gcc --version
        echo "RTT_EXEC_PATH=/opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin" >> $GITHUB_ENV

    - name: Install RISC-V Musl ToolChains
      if: ${{ matrix.legs.QEMU_ARCH == 'riscv64' && matrix.legs.UTEST == 'rtsmart/riscv64' && success() }}
      shell: bash
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.7/riscv64-linux-musleabi_for_x86_64-pc-linux-gnu_latest.tar.bz2
        sudo tar xjf riscv64-linux-musleabi_for_x86_64-pc-linux-gnu_latest.tar.bz2 -C /opt
        /opt/riscv64-linux-musleabi_for_x86_64-pc-linux-gnu/bin/riscv64-unknown-linux-musl-gcc --version
        echo "RTT_EXEC_PATH=/opt/riscv64-linux-musleabi_for_x86_64-pc-linux-gnu/bin" >> $GITHUB_ENV
        echo "RTT_CC_PREFIX=riscv64-unknown-linux-musl-" >> $GITHUB_ENV

    - name: Install AARCH64 Musl ToolChains
      if: ${{ matrix.legs.QEMU_ARCH == 'aarch64' && matrix.legs.UTEST == 'rtsmart/aarch64' && success() }}
      shell: bash
      run: |
        wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.7/aarch64-linux-musleabi_for_x86_64-pc-linux-gnu_stable.tar.bz2
        sudo tar xjf aarch64-linux-musleabi_for_x86_64-pc-linux-gnu_stable.tar.bz2 -C /opt
        /opt/aarch64-linux-musleabi_for_x86_64-pc-linux-gnu/bin/aarch64-linux-musleabi-gcc --version
        echo "RTT_EXEC_PATH=/opt/aarch64-linux-musleabi_for_x86_64-pc-linux-gnu/bin" >> $GITHUB_ENV
        echo "RTT_CC_PREFIX=aarch64-linux-musleabi-" >> $GITHUB_ENV

    - name: CPP11 Preprocessing Toolchain
      if: ${{ matrix.legs.QEMU_ARCH == 'arm' && matrix.legs.UTEST == 'components/cpp11' && success() }}
      shell: bash
      run: |
        # Delete the following files
        sudo rm -f /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/thread
        sudo rm -f /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/mutex
        sudo rm -f /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/condition_variable
        sudo rm -f /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/future
        sudo rm -f /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/pthread.h
        # Clear the contents of the following files
        sudo cat /dev/null > /opt/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_pthreadtypes.h
        # Clear -fno-exceptions in rtconfig.py
        sed -i 's/-fno-exceptions/ /g' $TEST_BSP_ROOT/rtconfig.py

    - name: Build BSP
      run: |
        echo CONFIG_RT_USING_UTESTCASES=y >> $TEST_BSP_ROOT/.config
        cat examples/utest/configs/$TEST_CONFIG_FILE >> $TEST_BSP_ROOT/.config
        scons --pyconfig-silent -C $TEST_BSP_ROOT
        scons -j$(nproc) --strict -C $TEST_BSP_ROOT

    # - name: Start run Test
    #   if: ${{matrix.legs.RUN == 'yes' && success() }}
    #   run: |
    #     echo $TEST_BSP_ROOT/$TEST_SD_FILE
    #     dd if=/dev/zero of=bsp/qemu-vexpress-a9/sd.bin bs=1024 count=65536
    #     qemu-system-arm -M $TEST_QEMU_MACHINE -smp cpus=2 -kernel bsp/qemu-vexpress-a9/rtthread.bin -nographic -sd bsp/qemu-vexpress-a9/sd.bin > qemu_output.log 2>&1 &
    #     QEMU_PID=$!
    #     sleep 20
    #     kill $QEMU_PID
    #     echo "start log read"
    #     cat qemu_output.log

    - name: Start run Test
      if: ${{matrix.legs.RUN == 'yes' && success() }}
      run: |
        dd if=/dev/zero of=bsp/qemu-vexpress-a9/sd.bin bs=1024 count=65536
        qemu-system-arm -M $TEST_QEMU_MACHINE -smp cpus=2 -kernel bsp/qemu-vexpress-a9/rtthread.bin -nographic -sd bsp/qemu-vexpress-a9/sd.bin > qemu_output.log 2>&1 &
        QEMU_PID=$!
        disown $QEMU_PID

    - name: Monitor log for failures and qemu end
      run: |
        echo "Monitoring logs for failures and qemu end..."

        FAILURE_DETECTED=false
        ERROR_LOGS=""
        
        while true; do
          tail -n 0 -f qemu_output.log | while read line; do
            if [[ "$line" == *"[  PASSED  ] [ result   ]"* ]]; then
              ERROR_LOGS="$ERROR_LOGS$line"$'\n'
              echo "$line"
              FAILURE_DETECTED=true
            fi

            if [[ "$line" == *"[==========] [ utest    ] end"* ]]; then
              echo "Utest run completed. Exiting log monitoring..."
              break
            fi
          done

        if $FAILURE_DETECTED; then
          echo "Error: Failures detected in logs. Below are the failure details:"
          echo "$ERROR_LOGS"
          exit 1
        fi
        done
